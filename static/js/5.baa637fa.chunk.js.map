{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.js","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsFoRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","DialogItem","path","id","className","s","dialog","name","Message","message","maxLength60","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","send","Dialogs","dialogsPage","dialogElements","dialogs","map","d","key","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","compose","dispatch","sendMessageCreator"],"mappings":"+FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,SAAW,0BAA0B,KAAO,wB,uICO1IC,EAA4B,SAACC,GAAD,MAAY,CACxCC,OAAQD,EAAME,KAAKD,SAGVE,EAAmB,SAACC,GAAe,IACtCC,EADqC,uKAGnC,OAAKC,KAAKC,MAAMN,OACL,kBAACG,EACDE,KAAKC,OAFe,kBAAC,IAAD,CAAUC,GAAK,eAHX,GACXC,IAAML,WAYtC,OAFmCM,YAAQX,EAARW,CAAmCL,K,+FCZ3DM,EAPI,SAACJ,GAChB,IAAIK,EAAO,YAAcL,EAAMM,GAC/B,OAAO,yBAAKC,UAAWC,IAAEC,QACrB,kBAAC,IAAD,CAASR,GAAII,GAAOL,EAAMU,QCAnBC,EAJC,SAACX,GACb,OAAO,yBAAKO,UAAWC,IAAEC,QAAST,EAAMY,U,yCCgCtCC,EAAcC,YAAiB,IAiB/BC,EAAsBC,YAAU,CAACC,KAAM,wBAAjBD,EAfL,SAAChB,GACpB,OACI,0BAAMkB,SAAUlB,EAAMmB,cACd,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUZ,KAAK,iBAAiBa,YAAY,qBAC9DC,SAAU,CAACC,IAAUZ,MAGzB,6BACI,4BAASN,UAAWC,IAAEkB,MAAtB,aAQLC,EA9CC,SAAC3B,GACb,IAAIP,EAAQO,EAAM4B,YACdC,EAAiBpC,EAAMqC,QACtBC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYtB,KAAMsB,EAAEtB,KAAMuB,IAAMD,EAAE1B,GAAIA,GAAI0B,EAAE1B,QACtD4B,EAAmBzC,EAAM0C,SACxBJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAASxB,QAASwB,EAAExB,QAASqB,IAAMG,EAAE9B,QAMnD,OAAKN,EAAMN,OAGP,yBAAKa,UAAWC,IAAEsB,SACd,yBAAKvB,UAAWC,IAAE6B,cACbR,GAEL,yBAAKtB,UAAWC,IAAE2B,UACd,6BAAMD,GACN,kBAACnB,EAAD,CAAqBG,SAbb,SAACoB,GACjBtC,EAAMuC,YAAYD,EAAOE,qBAGH,kBAAC,IAAD,CAAUvC,GAAI,Y,wBCA7BwC,sBACXtC,aAfkB,SAACV,GACnB,MAAO,CACHmC,YAAanC,EAAMmC,gBAIF,SAACc,GACtB,MAAO,CACHH,YAAa,SAACC,GACVE,EAAUC,YAAoBH,SAOtC5C,IAFW6C,CAGbd","file":"static/js/5.baa637fa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3ua91\",\"dialogsItems\":\"Dialogs_dialogsItems__18n4n\",\"messages\":\"Dialogs_messages__2olSi\",\"send\":\"Dialogs_send__2ZtN0\"};","import React from 'react';\r\nimport {\r\n    connect\r\n} from \"react-redux\";\r\nimport {\r\n    Redirect\r\n} from 'react-router-dom';\r\n\r\nlet mapStateToPropsFoRedirect = (state) => ({\r\n    isAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to = '/login' / >\r\n                return <Component {\r\n                    ...this.props\r\n                }\r\n            />\r\n        }\r\n    }\r\n\r\n    let ConnectAuthRedirectComponent = connect(mapStateToPropsFoRedirect)(RedirectComponent);\r\n\r\n    return ConnectAuthRedirectComponent;\r\n}","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = '/dialogs/' + props.id;\r\n    return <div className={s.dialog}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\n\r\nconst Message = (props) => {\r\n    return <div className={s.dialog}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport {required, maxLengthCreator} from './../../utils/validators/validators';\r\nimport {Textarea} from './../../components/common/FormsControls/FormsControls'\r\n\r\nconst Dialogs = (props) => {\r\n    let state = props.dialogsPage;\r\n    let dialogElements = state.dialogs\r\n        .map(d => <DialogItem name={d.name} key ={d.id} id={d.id}/>);\r\n    let messagesElements = state.messages \r\n        .map(m => <Message message={m.message} key ={m.id}/>);\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    if (!props.isAuth) return <Redirect to={\"/login\"}/>;\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nconst maxLength60 = maxLengthCreator(60)\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    <Field component={Textarea} name=\"newMessageBody\" placeholder=\"Enter your message\"\r\n                    validate={[required, maxLength60]}/>\r\n                </div>\r\n                \r\n                <div>\r\n                    <button  className={s.send}>Send</button>\r\n                </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form: \"dialogAddMessageForm\"}) (AddMessageForm)\r\n\r\nexport default Dialogs;","import {sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport {withAuthRedirect} from './../../hoc/withAuthRedirect';\r\nimport { compose } from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch (sendMessageCreator (newMessageBody) );\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose (\r\n    connect (mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}